#if !defined(RTE_TYPE_H)
#define RTE_TYPE_H
/**
  * \file Rte_Type.h
  *
  * \brief Autosar RTE Runtime Environment
  *
  * This file contains Rte type definitions
  *
  * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
  *
  * Copyright 2005-2010 Elektrobit Automotive GmbH
  * All rights exclusively reserved for Elektrobit Automotive GmbH,
  * unless expressly agreed to otherwise.
  */

 /*
  * This file has been automatically generated by
  * tresos RTE Generator Version 5.0.17
  * on Wed Feb 27 10:02:51 CET 2013. !!!IGNORE-LINE!!!
  */

 /* Misra deviations:
  * 1) Deviation against MISRA-C:1998 Rule 11 (required)
  *      and               MISRA-C:2004 Rule 5.1 (required)
  *      Description:
  *      Identifiers (internal and external) shall not rely
  *      on the significance of more than 31 characters.
  *      Reason:
  *      The defined RTE naming convention may result in
  *      identifiers with more than 31 characters.
  *      The compliance to this rule is under user's control.
  *
  */

 /* \addtogroup RTE Runtime Environment
  * @{ */

/*==================[inclusions]=============================================*/

#include <Rte.h>         /* RTE header file */

/*==================[macros]=================================================*/

/*------------------[enumeration constants]----------------------------------*/

#ifndef ECUM_STATE_STARTUP
#define ECUM_STATE_STARTUP ((EcuM_StateType) 16U)
#endif /* ECUM_STATE_STARTUP */
#ifndef ECUM_STATE_STARTUP_ONE
#define ECUM_STATE_STARTUP_ONE ((EcuM_StateType) 17U)
#endif /* ECUM_STATE_STARTUP_ONE */
#ifndef ECUM_STATE_STARTUP_TWO
#define ECUM_STATE_STARTUP_TWO ((EcuM_StateType) 18U)
#endif /* ECUM_STATE_STARTUP_TWO */
#ifndef ECUM_STATE_WAKEUP
#define ECUM_STATE_WAKEUP ((EcuM_StateType) 32U)
#endif /* ECUM_STATE_WAKEUP */
#ifndef ECUM_STATE_WAKEUP_ONE
#define ECUM_STATE_WAKEUP_ONE ((EcuM_StateType) 33U)
#endif /* ECUM_STATE_WAKEUP_ONE */
#ifndef ECUM_STATE_WAKEUP_VALIDATION
#define ECUM_STATE_WAKEUP_VALIDATION ((EcuM_StateType) 34U)
#endif /* ECUM_STATE_WAKEUP_VALIDATION */
#ifndef ECUM_STATE_WAKEUP_REACTION
#define ECUM_STATE_WAKEUP_REACTION ((EcuM_StateType) 35U)
#endif /* ECUM_STATE_WAKEUP_REACTION */
#ifndef ECUM_STATE_WAKEUP_TWO
#define ECUM_STATE_WAKEUP_TWO ((EcuM_StateType) 36U)
#endif /* ECUM_STATE_WAKEUP_TWO */
#ifndef ECUM_STATE_WAKEUP_WAKESLEEP
#define ECUM_STATE_WAKEUP_WAKESLEEP ((EcuM_StateType) 37U)
#endif /* ECUM_STATE_WAKEUP_WAKESLEEP */
#ifndef ECUM_STATE_WAKEUP_TTII
#define ECUM_STATE_WAKEUP_TTII ((EcuM_StateType) 38U)
#endif /* ECUM_STATE_WAKEUP_TTII */
#ifndef ECUM_STATE_RUN
#define ECUM_STATE_RUN ((EcuM_StateType) 48U)
#endif /* ECUM_STATE_RUN */
#ifndef ECUM_STATE_APP_RUN
#define ECUM_STATE_APP_RUN ((EcuM_StateType) 50U)
#endif /* ECUM_STATE_APP_RUN */
#ifndef ECUM_STATE_APP_POST_RUN
#define ECUM_STATE_APP_POST_RUN ((EcuM_StateType) 51U)
#endif /* ECUM_STATE_APP_POST_RUN */
#ifndef ECUM_STATE_SHUTDOWN
#define ECUM_STATE_SHUTDOWN ((EcuM_StateType) 64U)
#endif /* ECUM_STATE_SHUTDOWN */
#ifndef ECUM_STATE_PREP_SHUTDOWN
#define ECUM_STATE_PREP_SHUTDOWN ((EcuM_StateType) 68U)
#endif /* ECUM_STATE_PREP_SHUTDOWN */
#ifndef ECUM_STATE_GO_SLEEP
#define ECUM_STATE_GO_SLEEP ((EcuM_StateType) 73U)
#endif /* ECUM_STATE_GO_SLEEP */
#ifndef ECUM_STATE_GO_OFF_ONE
#define ECUM_STATE_GO_OFF_ONE ((EcuM_StateType) 77U)
#endif /* ECUM_STATE_GO_OFF_ONE */
#ifndef ECUM_STATE_GO_OFF_TWO
#define ECUM_STATE_GO_OFF_TWO ((EcuM_StateType) 78U)
#endif /* ECUM_STATE_GO_OFF_TWO */
#ifndef ECUM_STATE_RESET
#define ECUM_STATE_RESET ((EcuM_StateType) 144U)
#endif /* ECUM_STATE_RESET */
#ifndef ECUM_STATE_SLEEP
#define ECUM_STATE_SLEEP ((EcuM_StateType) 80U)
#endif /* ECUM_STATE_SLEEP */
#ifndef ECUM_STATE_OFF
#define ECUM_STATE_OFF ((EcuM_StateType) 128U)
#endif /* ECUM_STATE_OFF */
#ifndef ECUM_BOOT_TARGET_APP
#define ECUM_BOOT_TARGET_APP ((EcuM_BootTargetType) 0U)
#endif /* ECUM_BOOT_TARGET_APP */
#ifndef ECUM_BOOT_TARGET_BOOTLOADER
#define ECUM_BOOT_TARGET_BOOTLOADER ((EcuM_BootTargetType) 1U)
#endif /* ECUM_BOOT_TARGET_BOOTLOADER */

/*------------------[range definitions]--------------------------------------*/

#define OsTickType_LowerLimit ((OsTickType)0U)
#define OsTickType_UpperLimit ((OsTickType)4294967295U)
#define OsCounterType_LowerLimit ((OsCounterType)0U)
#define OsCounterType_UpperLimit ((OsCounterType)255U)
#define EcuM_StateType_LowerLimit ((EcuM_StateType)0U)
#define EcuM_StateType_UpperLimit ((EcuM_StateType)255U)
#define EcuM_UserType_LowerLimit ((EcuM_UserType)0U)
#define EcuM_UserType_UpperLimit ((EcuM_UserType)254U)
#define EcuM_BootTargetType_LowerLimit ((EcuM_BootTargetType)0U)
#define EcuM_BootTargetType_UpperLimit ((EcuM_BootTargetType)255U)
#define OsAppModeType_LowerLimit ((OsAppModeType)0U)
#define OsAppModeType_UpperLimit ((OsAppModeType)255U)
#define Float_with_NaN_LowerLimit ((Float_with_NaN)-INF)
#define Float_with_NaN_UpperLimit ((Float_with_NaN)INF)
#define Float_LowerLimit ((Float)-INF)
#define Float_UpperLimit ((Float)INF)
#define Double_with_NaN_LowerLimit ((Double_with_NaN)-INFINITY)
#define Double_with_NaN_UpperLimit ((Double_with_NaN)INFINITY)
#define Double_LowerLimit ((Double)-INFINITY)
#define Double_UpperLimit ((Double)INFINITY)
#define UInt4_LowerLimit ((UInt4)0U)
#define UInt4_UpperLimit ((UInt4)15U)
#define SInt4_LowerLimit ((SInt4)-8)
#define SInt4_UpperLimit ((SInt4)7)
#define UInt8_LowerLimit ((UInt8)0U)
#define UInt8_UpperLimit ((UInt8)255U)
#define SInt8_LowerLimit ((SInt8)-128)
#define SInt8_UpperLimit ((SInt8)127)
#define UInt16_LowerLimit ((UInt16)0U)
#define UInt16_UpperLimit ((UInt16)65535U)
#define SInt16_LowerLimit ((SInt16)-32768)
#define SInt16_UpperLimit ((SInt16)32767)
#define UInt32_LowerLimit ((UInt32)0U)
#define UInt32_UpperLimit ((UInt32)4294967295U)
#define SInt32_LowerLimit ((SInt32)-2147483648)
#define SInt32_UpperLimit ((SInt32)2147483647)

/*------------------[mode declarations]--------------------------------------*/

#define RTE_TRANSITION_EcuM_Mode \
          ((Rte_ModeType_EcuM_Mode)6U)
#define RTE_MODE_EcuM_Mode_POST_RUN \
          ((Rte_ModeType_EcuM_Mode)0U)
#define RTE_MODE_EcuM_Mode_RUN \
          ((Rte_ModeType_EcuM_Mode)1U)
#define RTE_MODE_EcuM_Mode_SHUTDOWN \
          ((Rte_ModeType_EcuM_Mode)2U)
#define RTE_MODE_EcuM_Mode_SLEEP \
          ((Rte_ModeType_EcuM_Mode)3U)
#define RTE_MODE_EcuM_Mode_STARTUP \
          ((Rte_ModeType_EcuM_Mode)4U)
#define RTE_MODE_EcuM_Mode_WAKE_SLEEP \
          ((Rte_ModeType_EcuM_Mode)5U)

/*==================[type definitions]=======================================*/

/*------------------[datatypes]----------------------------------------------*/

#if !defined(RTE_TYPE_OsTickType)
#define RTE_TYPE_OsTickType
typedef uint32 OsTickType;
#endif
#if !defined(RTE_TYPE_OsCounterType)
#define RTE_TYPE_OsCounterType
typedef uint8 OsCounterType;
#endif
#if !defined(RTE_TYPE_EcuM_StateType)
#define RTE_TYPE_EcuM_StateType
typedef uint8 EcuM_StateType;
#endif
#if !defined(RTE_TYPE_EcuM_UserType)
#define RTE_TYPE_EcuM_UserType
typedef uint8 EcuM_UserType;
#endif
#if !defined(RTE_TYPE_EcuM_BootTargetType)
#define RTE_TYPE_EcuM_BootTargetType
typedef uint8 EcuM_BootTargetType;
#endif
#if !defined(RTE_TYPE_OsAppModeType)
#define RTE_TYPE_OsAppModeType
typedef uint8 OsAppModeType;
#endif
#if !defined(RTE_TYPE_Boolean)
#define RTE_TYPE_Boolean
typedef boolean Boolean;
#endif
#if !defined(RTE_TYPE_Char8)
#define RTE_TYPE_Char8
typedef uint8 Char8;
#endif
#if !defined(RTE_TYPE_Char16)
#define RTE_TYPE_Char16
typedef uint8 Char16;
#endif
#if !defined(RTE_TYPE_Float_with_NaN)
#define RTE_TYPE_Float_with_NaN
typedef float32 Float_with_NaN;
#endif
#if !defined(RTE_TYPE_Float)
#define RTE_TYPE_Float
typedef float32 Float;
#endif
#if !defined(RTE_TYPE_Double_with_NaN)
#define RTE_TYPE_Double_with_NaN
typedef float64 Double_with_NaN;
#endif
#if !defined(RTE_TYPE_Double)
#define RTE_TYPE_Double
typedef float64 Double;
#endif
#if !defined(RTE_TYPE_UInt4)
#define RTE_TYPE_UInt4
typedef uint8 UInt4;
#endif
#if !defined(RTE_TYPE_SInt4)
#define RTE_TYPE_SInt4
typedef sint8 SInt4;
#endif
#if !defined(RTE_TYPE_UInt8)
#define RTE_TYPE_UInt8
typedef uint8 UInt8;
#endif
#if !defined(RTE_TYPE_SInt8)
#define RTE_TYPE_SInt8
typedef sint8 SInt8;
#endif
#if !defined(RTE_TYPE_UInt16)
#define RTE_TYPE_UInt16
typedef uint16 UInt16;
#endif
#if !defined(RTE_TYPE_SInt16)
#define RTE_TYPE_SInt16
typedef sint16 SInt16;
#endif
#if !defined(RTE_TYPE_UInt32)
#define RTE_TYPE_UInt32
typedef uint32 UInt32;
#endif
#if !defined(RTE_TYPE_SInt32)
#define RTE_TYPE_SInt32
typedef sint32 SInt32;
#endif
#if !defined(RTE_TYPE_UInt8_n)
#define RTE_TYPE_UInt8_n
typedef uint8 UInt8_n[8];
#endif
#if !defined(RTE_TYPE_DummyDbgEcuRx_datatype)
#define RTE_TYPE_DummyDbgEcuRx_datatype
typedef uint8 DummyDbgEcuRx_datatype[8];
#endif
#if !defined(RTE_TYPE_DummyDbgEcuTx_datatype)
#define RTE_TYPE_DummyDbgEcuTx_datatype
typedef uint8 DummyDbgEcuTx_datatype[8];
#endif

/*------------------[data handle types]--------------------------------------*/
typedef struct 
{
  VAR(UInt8, AUTOMATIC) value;
} Rte_DE_UInt8;

/*------------------[per instance memory types]------------------------------*/

/*------------------[mode declaration group types]---------------------------*/

typedef uint8 Rte_ModeType_EcuM_Mode;

/*------------------[port data structure types]------------------------------*/

/*------------------[component data structure types]-------------------------*/

typedef struct 
{
  /* Data Handles section */
  P2VAR(Rte_DE_UInt8, TYPEDEF, RTE_VAR) R_ModifyEcho_P_EchoOut_CounterValue;
  /* PIM handles section */
  /* Inter runnable variable section */
  /* Calibration parameters handles section */
  /* Exclusive areas handles section */
  /* Port API section */
  /* Inter Runnable Variable API Section */
  /* Vendor specific information: None */
} Rte_CDS_SWC_ModifyEcho;

typedef struct 
{
  /* Data Handles section */
  /* PIM handles section */
  /* Inter runnable variable section */
  /* Calibration parameters handles section */
  /* Exclusive areas handles section */
  /* Port API section */
  /* Inter Runnable Variable API Section */
  /* Vendor specific information: None */
  VAR(uint8, AUTOMATIC) _dummy;
} Rte_CDS_SWC_CyclicCounter;

typedef struct 
{
  /* Data Handles section */
  /* PIM handles section */
  /* Inter runnable variable section */
  /* Calibration parameters handles section */
  /* Exclusive areas handles section */
  /* Port API section */
  /* Inter Runnable Variable API Section */
  /* Vendor specific information: None */
  VAR(uint8, AUTOMATIC) _dummy;
} Rte_CDS_EcuStateManager;

/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/
/** @} doxygen end group definition */
#endif /* !defined(RTE_TYPE_H) */
/*==================[end of file]============================================*/

