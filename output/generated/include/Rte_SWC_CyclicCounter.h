#if !defined(RTE_SWC_CYCLICCOUNTER_H)
#define RTE_SWC_CYCLICCOUNTER_H
/**
  * \file Rte_SWC_CyclicCounter.h
  *
  * \brief Autosar RTE Runtime Environment
  *
  * This file contains Rte component declarations for Component Type SWC_CyclicCounter
  *
  * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
  *
  * Copyright 2005-2010 Elektrobit Automotive GmbH
  * All rights exclusively reserved for Elektrobit Automotive GmbH,
  * unless expressly agreed to otherwise.
  */

 /*
  * This file has been automatically generated by
  * tresos RTE Generator Version 5.0.17
  * on Wed Feb 27 10:02:51 CET 2013. !!!IGNORE-LINE!!!
  */

 /* Misra deviations:
  * 1) Deviation against MISRA-C:1998 Rule 11 (required)
  *      and               MISRA-C:2004 Rule 5.1 (required)
  *      Description:
  *      Identifiers (internal and external) shall not rely
  *      on the significance of more than 31 characters.
  *      Reason:
  *      The defined RTE naming convention may result in
  *      identifiers with more than 31 characters.
  *      The compliance to this rule is under user's control.
  *
  * 2) Deviation against MISRA-C:1998 Rule 42 (required)
  *      and               MISRA-C:2004 Rule 12.10 (required)
  *      Description:
  *      The comma operator shall not be used.
  *      Reason:
  *      RTE specification requires macros containing the
  *      comma operator
  *
  * 3) Deviation against MISRA-C:1998 Rule 87 (required)
  *      and               MISRA-C:2004 Rule 19.1 (advisory)
  *      Description:
  *      include statements in a file shall only be preceded
  *      by other pre-processor directives or comments.
  *      Reason:
  *      This is explicitly required by AUTOSAR
  *      Specification of Memory Mapping
  *
  */

 /* \addtogroup RTE Runtime Environment
  * @{ */

/*==================[inclusions]=============================================*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <Rte_Type.h>         /* RTE types header file */
#include <Rte.h>              /* RTE header file */
#include <Rte_Hook.h>         /* RTE VFB trace hooks header file */

/*==================[macros]=================================================*/

#if (!defined RTE_CORE) /* if included by software component */

#if (!defined RTE_APPLICATION_HEADER_FILE_H) /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif /* if !defined( RTE_APPLICATION_HEADER_FILE_H ) */

#endif

/*------------------[API mapping]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#define Rte_IrvRead_R_SetCounterAndAdd_CurrentCounterValue() Rte_IrvRead_SWC_CyclicCounter_R_SetCounterAndAdd_CurrentCounterValue()
#define Rte_IrvWrite_R_SetCounterAndAdd_CurrentCounterValue(data) Rte_IrvWrite_SWC_CyclicCounter_R_SetCounterAndAdd_CurrentCounterValue(data)
#define Rte_IrvRead_R_Cyclic_CurrentCounterValue() Rte_IrvRead_SWC_CyclicCounter_R_Cyclic_CurrentCounterValue()
#define Rte_IrvWrite_R_Cyclic_CurrentCounterValue(data) Rte_IrvWrite_SWC_CyclicCounter_R_Cyclic_CurrentCounterValue(data)
#define Rte_Write_P_CounterOut_CounterValue Rte_Write_SWC_CyclicCounter_P_CounterOut_CounterValue
#define Rte_Receive_P_SpecialHandling_EventMessage Rte_Receive_SWC_CyclicCounter_P_SpecialHandling_EventMessage

#endif

/*------------------[port handle API mapping]--------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*------------------[application errors]-------------------------------------*/

/*------------------[init values]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#define Rte_InitValue_P_CounterOut_CounterValue ((UInt8) 0U)
#define Rte_InitValue_P_SpecialHandling_EventMessage ((UInt8) 0U)

#endif

/*==================[type definitions]=======================================*/

/*------------------[instance handle type]-----------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_SWC_CyclicCounter, RTE_CONST, RTE_CONST) Rte_Instance;
#endif

/*------------------[port handle types]--------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#endif

/*------------------[per instance memory types]------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[external function declarations]=========================*/

/*------------------[declaration of runnable entities]-----------------------*/

#define RTE_START_SEC_APPL_CODE
#include "MemMap.h"

extern FUNC(void, RTE_APPL_CODE) SWC_cyclic_R_SetCounter(UInt8 newCounterValue, P2VAR(UInt8, AUTOMATIC, RTE_APPL_DATA) ReturnSum);

extern FUNC(void, RTE_APPL_CODE) SWC_cyclic_R_Cyclic(void);

#define RTE_STOP_SEC_APPL_CODE
#include "MemMap.h"

/*--------------[declaration of API functions provided by Rte]--------------*/

#define RTE_START_SEC_CODE
#include "MemMap.h"

extern FUNC(UInt8, RTE_CODE) Rte_IrvRead_SWC_CyclicCounter_R_SetCounterAndAdd_CurrentCounterValue (void);
extern FUNC(void, RTE_CODE) Rte_IrvWrite_SWC_CyclicCounter_R_SetCounterAndAdd_CurrentCounterValue (UInt8 data);
extern FUNC(UInt8, RTE_CODE) Rte_IrvRead_SWC_CyclicCounter_R_Cyclic_CurrentCounterValue (void);
extern FUNC(void, RTE_CODE) Rte_IrvWrite_SWC_CyclicCounter_R_Cyclic_CurrentCounterValue (UInt8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SWC_CyclicCounter_P_CounterOut_CounterValue (UInt8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Receive_SWC_CyclicCounter_P_SpecialHandling_EventMessage (P2VAR(UInt8, AUTOMATIC, RTE_APPL_DATA) data);

#define RTE_STOP_SEC_CODE
#include "MemMap.h"

/*--------------[declaration of API functions provided by other Appl]--------*/

#define RTE_START_SEC_APPL_CODE
#include "MemMap.h"

#if (!defined RTE_CORE) /* if included by software component */

#endif /* (!defined RTE_CORE) */

#define RTE_STOP_SEC_APPL_CODE
#include "MemMap.h"

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*------------------[instance handle declaration]----------------------------*/
#define RTE_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"

extern CONSTP2CONST(Rte_CDS_SWC_CyclicCounter, RTE_CONST, RTE_CONST) Rte_Inst_SWC_CyclicCounter;

#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
/** @} doxygen end group definition */
#endif /* !defined(RTE_SWC_CYCLICCOUNTER_H) */
/*==================[end of file]============================================*/

