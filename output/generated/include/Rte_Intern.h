#if !defined(RTE_INTERN_H)
#define RTE_INTERN_H
/**
  * \file Rte_Intern.h
  *
  * \brief Autosar RTE Runtime Environment
  *
  * This file contains internal Rte declarations
  *
  * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
  *
  * Copyright 2005-2010 Elektrobit Automotive GmbH
  * All rights exclusively reserved for Elektrobit Automotive GmbH,
  * unless expressly agreed to otherwise.
  */

 /*
  * This file has been automatically generated by
  * tresos RTE Generator Version 5.0.17
  * on Wed Feb 27 10:02:51 CET 2013. !!!IGNORE-LINE!!!
  */

 /* Misra deviations:
  * 1) Deviation against MISRA-C:1998 Rule 11 (required)
  *      and               MISRA-C:2004 Rule 5.1 (required)
  *      Description:
  *      Identifiers (internal and external) shall not rely
  *      on the significance of more than 31 characters.
  *      Reason:
  *      The defined RTE naming convention may result in
  *      identifiers with more than 31 characters.
  *      The compliance to this rule is under user's control.
  *
  * 2) Deviation against MISRA-C:1998 Rule 87 (required)
  *      and               MISRA-C:2004 Rule 19.1 (advisory)
  *      Description:
  *      include statements in a file shall only be preceded
  *      by other pre-processor directives or comments.
  *      Reason:
  *      This is explicitly required by AUTOSAR
  *      Specification of Memory Mapping
  *
  * 3)  Deviation against MISRA-C:1998 Rule 93 (advisory)
  *      and               MISRA-C:2004 Rule 19.7 (advisory)
  *      Description:
  *      A function should be used in preference of a
  *      function-like macro
  *      Reason:
  *      The RTE specification demands that function like
  *      macros are used for the implementation
  *
  */

 /* \addtogroup RTE Runtime Environment
  * @{ */

/*==================[inclusions]=============================================*/

#include <os.h>                     /* OS header file */
#include <Rte.h>                    /* RTE header file */
#include <Rte_Type.h>               /* RTE types header file */
#include <Com.h>                    /* COM header file */

/*==================[macros]=================================================*/

/*------------------[ticks to ns]--------------------------------------------*/

#define RTE_NS_TO_TICKS(ns) (((TickType) ((ns) / 100000000UL)))

/*------------------[starting of schedule tables]----------------------------*/

#define Rte_StartScheduleTable_Rte_DefaultScheduleTable() (StartScheduleTableRel (Rte_DefaultScheduleTable, 1U))

/*------------------[RTE events]---------------------------------------------*/

#define Rte_SetEvent_DRE_Rte_EventTask_0() \
      do \
      { \
        Rte_Task_SetEvent(Rte_EventTask, Rte_OSTriggerRunnableEvent_0_0);\
        (void) SetEvent(Rte_EventTask, Rte_OSTriggerRunnableEvent_0_0);\
      } while(0)

#define Rte_SetEvent_SSFE_Rte_EventTask_1() \
      do \
      { \
        Rte_Task_SetEvent(Rte_EventTask, Rte_OSResolveWaitPointEvent_0_1);\
        (void)SetEvent(Rte_EventTask, Rte_OSResolveWaitPointEvent_0_1);\
      } while(0)

/*------------------[symbolic names for COM signals]-------------------------*/

/* Com Signal Defines */
/* RxSignals */
#if(!defined SGCounterIn)
#define SGCounterIn 0U
#endif
/* TxSignals */
#if(!defined SGCounterOut)
#define SGCounterOut 0U
#endif
/* RxSignalGroups */
/* TxSignalGroups */

/*------------------[interrupt locking]--------------------------------------*/

#define Rte_IntLock()     SuspendAllInterrupts()
#define Rte_IntUnlock()   ResumeAllInterrupts()

/*------------------[client request states]----------------------------------*/

/*------------------[mode disabling dependencies]----------------------------*/

/*==================[type definitions]=======================================*/

/*------------------[receive buffer types]-----------------------------------*/

/*------------------[shared buffer types]------------------------------------*/

/*------------------[receive queue types]------------------------------------*/

typedef struct
{
  VAR(UInt8, AUTOMATIC) queue[9];
  VAR(uint8, AUTOMATIC) head;
  VAR(uint8, AUTOMATIC) tail;
  VAR(boolean, AUTOMATIC) overflow;
} Rte_ReceiveQueue_0_Type;

/*------------------[client request types]-----------------------------------*/

/*------------------[invocation queue types]---------------------------------*/

/*------------------[mode receive queue types]-------------------------------*/

/*------------------[event mask type]----------------------------------------*/

typedef uint8 Rte_Rte_EventTask_EventSegmentType;
typedef uint8 Rte_Rte_TimedTask_EventSegmentType;

/*------------------[mode disabling dependency type]-------------------------*/

/*------------------[calprm group types]-------------------------------------*/

/*==================[external function declarations]=========================*/

#define RTE_START_SEC_CODE
#include "MemMap.h"

#ifdef OS_HAS_WAITGETCLEAREVENT

#define Rte_WaitGetClearEvent(e, ep, tid)  OS_WaitGetClearEvent(e, ep)

#else

extern FUNC(StatusType, RTE_CODE) Rte_WaitGetClearEvent
(
VAR(EventMaskType, RTE_VAR) eventToWait,
P2VAR(EventMaskType, AUTOMATIC, RTE_VAR) eventReceived,
VAR(TaskType, RTE_VAR) myTaskId
);

#endif

/*==================[internal function declarations]=========================*/

/*------------------[declaration of API functions]---------------------------*/

/*------------------[OS object declarations]---------------------------------*/

DeclareTask (Rte_EventTask);
DeclareTask (Rte_TimedTask);
DeclareResource (Rte_Res_0);
DeclareEvent (Rte_OSShutdownEvent);
DeclareEvent (Rte_OSTriggerRunnableEvent_0_0);
DeclareEvent (Rte_OSResolveWaitPointEvent_0_1);

#define RTE_STOP_SEC_CODE
#include "MemMap.h"

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/
/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/
/** @} doxygen end group definition */
#endif /* !defined(RTE_INTERN_H) */
/*==================[end of file]============================================*/

